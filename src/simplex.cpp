#include "simplex.hpp"

const uint8_t Simplex::p[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
	0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
	0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
	0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,
	0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,
	0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,
	0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
	0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
	0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,
	0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
	0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,
	0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
	0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
	0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
	0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,
	0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
	0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,
	0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
	0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,
	0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
	0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,
	0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
	0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,
	0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
};

const int Simplex::g[][3] = {
	{ 1, 1, 0 }, { -1, 1, 0 }, { 1, -1, 0 }, { -1, -1, 0 },
	{ 1, 0, 1 }, { -1, 0, 1 }, { 1, 0, -1 }, { -1, 0, -1 },
	{ 0, 1, 1 }, { 0, -1, 1 }, { 0, 1, -1 }, { 0, -1, -1 }
};

uint8_t Simplex::hash(int x, int y, uint32_t seed) {
	return p[(x + p[(y + p[seed&255])&255])&255];
}

int Simplex::fastfloor(float x) {
	//return x > 0 ? (int) x : (int) x - 1;
	return std::floor(x);
}

float Simplex::dot(int x0, int y0, float x1, float y1) {
	return x0 * x1 + y0 * y1;
}

Simplex::Simplex(uint32_t s) : seed(s) {}

float Simplex::noise(float x, float y) {

	// Coordinate skewing
	/*
	 * F = (sqrt(n + 1) - 1)/n
	 */
	const float F = 0.36602540378443864676372317075293f;

	float skewed_x = x + F * (x + y);
	float skewed_y = y + F * (x + y);

	// Snap skewed coordinates to simplex grid
	int index_x = fastfloor(skewed_x);
	int index_y = fastfloor(skewed_y);

	// Unskew snapped coordinates
	/*
	 * G = ?
	 */
	const float G = 0.21132486540518711774542560974902f;

	float X0 = index_x - G * (index_x + index_y);
	float Y0 = index_y - G * (index_x + index_y);
	
	// Determine one vertex of the simplex
	float x0 = x - X0;
	float y0 = y - Y0;

	// Determine triangle within simplex
	int step_x, step_y;
	if (x0 > y0) { step_x = 1; step_y = 0; }
	else         { step_x = 0; step_y = 1; }

	// Compute other two vertex of the simplex
	float x1 = x0 - step_x + G;
	float y1 = y0 - step_y + G;
	float x2 = x0 - 1.f + 2.f * G;
	float y2 = y0 - 1.f + 2.f * G;

	// Get hashed index of the gradient vectors
	int index_x1 = Simplex::fastfloor(x1);
	int index_y1 = Simplex::fastfloor(y1);
	int index_x2 = Simplex::fastfloor(x2);
	int index_y2 = Simplex::fastfloor(y2);

	int g0 = Simplex::hash(index_x, index_y, seed);
	int g1 = Simplex::hash(index_x1, index_y1, seed);
	int g2 = Simplex::hash(index_x2, index_y2, seed);

	// Compute contribution of the 3 corners
	float n0, n1, n2;

	float t0 = 0.5f - x0 * x0 - y0 * y0;
	if (t0 < 0) n0 = 0.f;
	else n0 = t0 * t0 * t0 * Simplex::dot(g[g0%12][0], g[g0%12][1], x0, y0);

	float t1 = 0.5f - x1 * x1 - y1 * y1;
	if (t1 < 0) n1 = 0.f;
	else n1 = t1 * t1 * t1 * Simplex::dot(g[g1%12][0], g[g1%12][1], x1, y1);

	float t2 = 0.5f - x2 * x2 - y2 * y2;
	if (t2 < 0) n2 = 0.f;
	else n2 = t2 * t2 * t2 * Simplex::dot(g[g2%12][0], g[g2%12][1], x2, y2);

	// Add contributions
	// Result in [0, 1]
	return (30.f * (n0 + n1 + n2) + 1.f) * 0.5f;
}

float Simplex::fractal(float x, float y, float pers, float freq, int oct, float a) {
	float value = 0.f;
	float amplitude = a;
	float frequency = freq;

	for (int i = 0; i < oct; ++i) {
		value += noise(x * frequency, y * frequency) * amplitude;
		amplitude *= pers;
		freq *= 2;
	}

	return value;
}